<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EMAIL_ALREADY_REGISTERED" xml:space="preserve">
    <value>Email already registered</value>
    <comment>Já existe um usuário para este email</comment>
  </data>
  <data name="EMPTY_EMAIL" xml:space="preserve">
    <value>Email must be provided</value>
    <comment>O email deve ser informado</comment>
  </data>
  <data name="EMPTY_NAME" xml:space="preserve">
    <value>Name must be provided</value>
    <comment>O nome deve ser informado</comment>
  </data>
  <data name="INVALID_EMAIL" xml:space="preserve">
    <value>This email is not valid</value>
    <comment>Email inválido</comment>
  </data>
  <data name="INVALID_EMAIL_OR_PASSWORD" xml:space="preserve">
    <value>Invalid email or password</value>
    <comment>E-mail ou senha inválido</comment>
  </data>
  <data name="INVALID_PASSWORD_LENGTH" xml:space="preserve">
    <value>Password must be at least 8 characters</value>
    <comment>A senha deve ter no mínimo 8 caracteres</comment>
  </data>
  <data name="INVALID_PASSWORD_NULL_OR_WHITE_SPACE" xml:space="preserve">
    <value>Password can not be null or witespace</value>
    <comment>A senha não pode ser nula ou espaços em branco</comment>
  </data>
  <data name="NOT_FOUND_EXCEPTION" xml:space="preserve">
    <value>Id not found</value>
    <comment>Id não encontrado</comment>
  </data>
  <data name="PASSWORD_DIFFERNT_CURRENT_PASSWORD" xml:space="preserve">
    <value>Password does not match current password</value>
    <comment>A senha informada está diferente da senha atual</comment>
  </data>
  <data name="CODE_DESCRIPTION_EXCEPTION" xml:space="preserve">
    <value>Code or description already registered</value>
    <comment>Código ou descrição já registrada</comment>
  </data>
  <data name="UNKNOWN_ERROR" xml:space="preserve">
    <value>Unknown error</value>
    <comment>Erro desconhecido</comment>
  </data>
  <data name="EMPTY_CODE" xml:space="preserve">
    <value>The code can not be null</value>
    <comment>O Código não pode ser nulo</comment>
  </data>
  <data name="EMPTY_DESCRIPTION" xml:space="preserve">
    <value>The description can not be null</value>
    <comment>A descrição não pode ser nula</comment>
  </data>
  <data name="PRICE_NOT_GREATER_THAN_ZERO" xml:space="preserve">
    <value>The price must be greather than zero</value>
    <comment>O preço deve ser maior que zero</comment>
  </data>
  <data name="EMPTY_BARBER" xml:space="preserve">
    <value>The barber id is mandatory</value>
    <comment>O id do barbeiro é obrigatório</comment>
  </data>
  <data name="EMPTY_SERVICE" xml:space="preserve">
    <value>At least one service must be selected</value>
    <comment>É necessário selecionar ao menos um serviço</comment>
  </data>
  <data name="EMPTY_CUSTOMER" xml:space="preserve">
    <value>The customer id must be provided</value>
    <comment>O id do cliente deve ser informado</comment>
  </data>
  <data name="CUSTOMER_ALREADY_WAITING" xml:space="preserve">
    <value>You are already waiting in queue (in progress)</value>
    <comment>Você já está aguardando na fila (existe um registro na fila ainda não concluído)</comment>
  </data>
  <data name="INVALID_CATEGORY" xml:space="preserve">
    <value>Category can not be null or less than zero</value>
    <comment>A categoria não pode ser nula ou menor que zero</comment>
  </data>
</root>